#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Sep 29 02:44:06 2019

@author: tomforbes
"""
    
import matplotlib.pyplot as plt
from matplotlib import style
import numpy as np
style.use('ggplot')


    
    
    
def fullbranch(alpha1,     #probability of mutating to type 1 resistance
               alpha2,     #probability of mutating to type 2 resistance
               alpha12,    #probability of mutating to dual resistance from type 1 
               alpha21,    #probability of mutating to dual resistance from type 2
               p0,         #probability of 0 offspring
               p1,         #probability of 1 offspring
               p2,         #probability of 2 offspring
               p3,         #probability of 3 offspring
               population_limit):   #population limit for process
    
    assert population_limit <500, 'it is recommended you lower the population limit'
    assert int(population_limit) == population_limit, 'population must be an integer value'
    
    #define cell lifetimes
    def lifetime():
        exp = np.random.exponential(scale=1)
        return exp
    
    def zeromutation(alpha1, alpha2):
        urv = np.random.random()
        
        assert alpha1 <0.5, 'pick a value between 0 and 0.5'
        assert alpha1 >0,   'pick a value between 0 and 0.5'
        assert alpha2 >0.5, 'pick a value between 0.5 and 1'
        assert alpha2 <1  , 'pick a value between 0.5 and 1'
        
        if urv < alpha1:
            shift = 1
        elif urv > alpha2:
            shift = 2
        else:
            shift = 0
        return shift
    #define probabilities for type 1 resistance to mutate to dual resistance
    def onemutation(alpha12):
        
        assert alpha12 >0,  'pick a value between 0 and 0.5'
        assert alpha12 <0.5,'pick a value between 0 and 0.5'
        
        urv = np.random.random()
        if urv < alpha12:
            shift = 1
        else:
            shift = 0
        return shift
    #define probabilities for type 2 resistance to mutate to dual resistance
    def twomutation(alpha21):
        
        assert alpha21 >0,  'pick a value between 0 and 0.5'
        assert alpha21 <0.5,'pick a value between 0 and 0.5'
        
        urv = np.random.random()
        if urv < alpha21:
            shift = 1
        else:
            shift = 0
        return shift
    #define probabilities for dual resistance
    def fullmutation():
        return 0
    #define offpring probabilities
    def offspring(p0,p1,p2,p3):
        
        assert p0 >0,  'offspring probabilities must be between 0 and 1'
        assert p1 >0,  'offspring probabilities must be between 0 and 1'
        assert p2 >0,  'offspring probabilities must be between 0 and 1'
        assert p3 >0,  'offspring probabilities must be between 0 and 1'
        assert p0+p1+p2+p3 == 1,  'offspring probabilities must sum to 1'
        
        
        urv = np.random.random()
        #print(urv)
        if urv < p0:
            nextx = 0
        elif urv < p0+p1:
            nextx = 1
        elif urv < p0+p1+p2:
            nextx = 2
        else:
            nextx = 3
        return nextx
    
    
    
    
    
    
    
    
    
    
    
    def branch(count3 = 0,
        listofxs = [[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]]],
           listofys = [[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]]],
           mut = zeromutation(alpha1,alpha2),
           population_limit = 100):
        x0 = 1
        totx = 1
        x = [0,x0]
        plotlist = []
        branches = [1]
        listofbranches = [[1]]
        listY=[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]
        listX=[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]
        z=0
        popcount = [0]
        gencount = []
        extinction_probablity = []
        lifetimes = []
        deathtimes = []
        mutationlist = []
        count2 = 0
        while x[-1] != x[-2]:    # while the total population is increasing every gen
            xcoords = []
            xcoords = [n[-1] for n in listofxs[-1]]
            #print(x)
            ycoords = []
            ycoords = [n[-1] for n in listofys[-1]]
            #print(xcoords,ycoords)
            #creating list of y coordinates to start new branches from
            listofbranches.append(branches)
            # collect all the branches in listyy
            branches = []
            listY = []
            listX = []
            popcount.append(totx)           # list containing cumulative population
            gencount.append(totx-popcount[-2])          # list containing living population
            extinction_probablity.append(p0**(totx-popcount[-2]))
            count = 0
            count2 = count2 + 1
            count3 = 0
            if totx >population_limit:
                break 
            else:
                for i in listofbranches[-1]:
                    if i > 0:
                        for j in range(i):
                            nextx = offspring(p0,p1,p2,p3)
                            branches.append(nextx)
                            totx += nextx
                            count = count + 1  # keeping count of branches in previous generation
                            # for the branch values i.e [0,1,2]
                            # we ignore 0 values since this means no offspring
                            # if we have a ’2’ in our branch j=2
                            # generate our offspring
                            # add them to the generation branch
                            # add them to the total population
                            for i in range(nextx):
                                nextlife = lifetime()
                                mut = zeromutation(alpha1,alpha2)
                                a = [xcoords[count-1],xcoords[count-1] + nextlife]
                                b = [ycoords[count-1],(ycoords[count-1]+i+j+sum(branches[0:-1]))]
                                if mut == 1:
                                    if count3 < 2:
                                        count3 = count3+1
                                        print('FULLMUTATION',a,b)
                                        branch(count3 =1,
                                           listofys = [[[0,0]],[[0,0]],[[0,0]],
                                                       [[0,0]],[[0,0]],[[0,0]],[b]],
                                           listofxs = [[[0,0]],[[0,0]],[[0,0]],[[0,0]],
                                                       [[0,0]],[[0,0]],[[0,0]],[a]],
                                           mut = fullmutation() )
                                    else:   
                                        pass
                                else:   
                                    pass
                                plotlist.append(a)
                                listX.append(a)
                                lifetimes.append(xcoords[count-1])
                                deathtimes.append(xcoords[count-1]+ nextlife)
                                plotlist.append(b)               # add our y coords
                                listY.append(b)                #store y coords in listY
                                for z in listY:
                                    if listY[-1][-1] == z[-1]:
                                        z = z + [0,1]
                                    else:
                                        pass
                                    # we make sure the branches dont overlap
                    else: 
                        pass
                x.append(totx)
                listofys.append(listY)
                listofxs.append(listX)
                #print(listofxs,listofys)
                if mutationlist == []:
                    mutationlist = [0]
                else:
                    pass
            popcount = popcount[1:]
        print(plotlist)
    
    
    
    
    
    
    x0 = 1
    totx = 1
    x = [0,x0]
    plotlist = []
    branches = [1]
    listofbranches = [[1]]
    listofys = [[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]]]
    listY=[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]
    listofxs = [[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]]]
    listX=[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]
    z=0
    popcount = [0]
    gencount = []
    extinction_probablity = []
    lifetimes = []
    deathtimes = []
    mutationlist = []
    count2 = 0
    while x[-1] != x[-2]:
        xcoords = []
        xcoords = [n[-1] for n in listofxs[-1]]
        #print(xcoords)
        ycoords = []
        ycoords = [n[-1] for n in listofys[-1]]
        listofbranches.append(branches)
        branches = []
        listY = []
        listX = []
        popcount.append(totx)
        gencount.append(totx-popcount[-2])
        extinction_probablity.append(p0**(totx-popcount[-2]))
        count = 0
        count2 = count2
        count3 = 0
        if totx >population_limit:
            break 
        else:
            for i in listofbranches[-1]:
                if i > 0:
                    for j in range(i):
                        nextx = offspring(p0,p1,p2,p3)
                        branches.append(nextx)
                        totx += nextx
                        count = count + 1
                        for i in range(nextx):
                            nextlife = lifetime()
                            mut = zeromutation(alpha1,alpha2)
                            #print(mut)
                            a = [xcoords[count-1],xcoords[count-1] + nextlife]
                            b = [ycoords[count-1],(ycoords[count-1]+i+j+sum(branches[0:-1]))]
                            if mut == 1:
                                #in this case start a subprocess representing type 1 resistance
                                if count3 < 2:
                                    count3 = count3+1
                                    print('ONEMUTATION',a,b)
                                    branch(count3 =1,
                                       listofys = [[[0,0]],[[0,0]],[[0,0]],
                                                   [[0,0]],[[0,0]],[[0,0]],[b]],
                                       listofxs = [[[0,0]],[[0,0]],[[0,0]],[[0,0]],
                                                   [[0,0]],[[0,0]],[[0,0]],[a]],
                                        mut = onemutation(alpha12))
                                else:
                                    pass
                            else: 
                                pass
                            if mut == 2:
            #in this case start a subprocess representing type 2 resistance
                                if count3 < 2:
                                    count3 = count3+1
                                    print('TWOMUTATION',a,b)
                                    branch(count3 =1,
                                       listofys = [[[0,0]],[[0,0]],[[0,0]],
                                                   [[0,0]],[[0,0]],[[0,0]],[b]],
                                       listofxs = [[[0,0]],[[0,0]],[[0,0]],[[0,0]],
                                                   [[0,0]],[[0,0]],[[0,0]],[a]],
                                                   mut = twomutation(alpha21) )
                                else:   
                                    pass
                            else: 
                                pass
                            plotlist.append(a)
                            listX.append(a)
                            lifetimes.append(xcoords[count-1])
                            deathtimes.append(xcoords[count-1]+ nextlife)
                            plotlist.append(b)
                            listY.append(b)
                            for z in listY:
                                if listY[-1][-1] == z[-1]:
                                    z = z + [0,1]
                                else: 
                                    pass
            else: 
                pass
        x.append(totx)
        listofys.append(listY)
        listofxs.append(listX)
        if mutationlist == []:
            mutationlist = [0]
        else:
            pass
    popcount = popcount[1:]

#count = 0
#ycord = []
#lifetimes = sorted(lifetimes)
#deathtimes = sorted(deathtimes)
#for i in lifetimes:
#    count = count + 1
#    ycord.append(count)
#if len(deathtimes) > 0:
#    lifetimes.append(deathtimes[-1])
#    ycord.append(ycord[-1])


# Plots are generated by pasting the plotlist, into
# the plot function in python and plots for population
# counts utilise the values stored in ’lifetimes’,
# ’deathtimes’,’ycord’ and ’gencount’.
                            
#print(lifetimes)
#print(deathtimes)
#print(ycord)
#print(gencount)
                     
    print(plotlist)       



fullbranch(0.01, 0.99, 0.01, 0.01, 0.3, 0.3, 0.2, 0.2, 100)
                            
              
fig, ax = plt.subplots(figsize=(10, 10))
fig.subplots_adjust(bottom=0.3)
plt.xticks(rotation=90)      
plt.plot([0, 0.5764810626708365], [0, 0], [0, 1.0414552456562467], [0, 1], [0.5764810626708365, 1.159139909219557], [0, 0], [1.0414552456562467, 1.2563966840222216], [1, 3], [1.0414552456562467, 1.4079908314081626], [1, 4], [1.0414552456562467, 2.3883803234383176], [1, 5], [1.159139909219557, 1.231026441563348], [0, 0], [1.2563966840222216, 2.731348391171988], [3, 4], [1.4079908314081626, 1.5610065066702323], [4, 7], [1.4079908314081626, 1.5642555058650205], [4, 8], [2.3883803234383176, 2.9091727276718204], [5, 11], [2.3883803234383176, 3.3011328859190145], [5, 12], [1.231026441563348, 2.553569248628221], [0, 0], [1.231026441563348, 2.085374442386359], [0, 1], [2.731348391171988, 4.8005873441473685], [4, 6], [2.731348391171988, 2.863088903129021], [4, 7], [2.731348391171988, 3.8387680263804906], [4, 8], [1.5610065066702323, 2.489482079614628], [7, 12], [1.5610065066702323, 2.3501886768888656], [7, 13], [2.9091727276718204, 4.407449787635276], [11, 18], [2.9091727276718204, 3.858243604256635], [11, 19], [2.9091727276718204, 3.271213426910473], [11, 20], [3.3011328859190145, 3.5224312352453646], [12, 23], [3.3011328859190145, 6.124948138256549], [12, 24], [3.3011328859190145, 4.801257092320701], [12, 25], [2.553569248628221, 4.196457441579806], [0, 0], [2.553569248628221, 3.608577396835071], [0, 1], [2.085374442386359, 4.58655941321152], [1, 4], [2.085374442386359, 2.4741753733914678], [1, 5], [4.8005873441473685, 6.754854374819927], [6, 10], [2.863088903129021, 3.5867240429556193], [7, 13], [2.863088903129021, 5.265007631851235], [7, 14], [2.863088903129021, 4.920110504380439], [7, 15], [3.8387680263804906, 6.592175775499525], [8, 18], [3.8387680263804906, 3.963803668394989], [8, 19], [2.489482079614628, 2.8474712653612793], [12, 22], [2.3501886768888656, 3.431861514017185], [13, 25], [2.3501886768888656, 2.789676148883775], [13, 26], [2.3501886768888656, 2.738854633050127], [13, 27], [4.407449787635276, 5.494164295377759], [18, 32], [3.271213426910473, 3.4479526691393327], [20, 37], [3.5224312352453646, 3.8613056749696906], [23, 39], [3.5224312352453646, 7.967289065276729], [23, 40], [4.801257092320701, 6.028547088067599], [25, 45], [4.196457441579806, 5.831888845999185], [0, 0], [3.608577396835071, 3.6466319874598114], [1, 3], [4.58655941321152, 10.34656987684114], [4, 6], [2.4741753733914678, 2.515814460804155], [5, 9], [2.4741753733914678, 2.5410632245485965], [5, 10], [2.4741753733914678, 2.5417284733462737], [5, 11], [6.754854374819927, 6.788541869425996], [10, 16], [6.754854374819927, 9.068390573839], [10, 17], [3.5867240429556193, 3.990351808068318], [13, 21], [3.5867240429556193, 4.9703615634840075], [13, 22], [5.265007631851235, 9.362442743360143], [14, 25], [5.265007631851235, 8.402202044378486], [14, 26], [5.265007631851235, 8.03238262020562], [14, 27], [3.963803668394989, 7.56623558382231], [19, 33], [2.8474712653612793, 4.595302637812905], [22, 36], [2.8474712653612793, 5.266614448182837], [22, 37], [3.431861514017185, 4.255260134964089], [25, 41], [2.789676148883775, 4.076031563510165], [26, 44], [2.789676148883775, 3.7329272615668603], [26, 45], [2.738854633050127, 4.049555838195616], [27, 48], [7.967289065276729, 8.04882127599303], [40, 61], [7.967289065276729, 8.43097980981967], [40, 62], [7.967289065276729, 10.344728811550478], [40, 63], [5.831888845999185, 5.840105675792614], [0, 0], [5.831888845999185, 6.442182410664726], [0, 1], [5.831888845999185, 6.179721952579305], [0, 2], [3.6466319874598114, 4.3498441469592155], [3, 6], [3.6466319874598114, 3.7018780117857393], [3, 7], [3.6466319874598114, 3.7981557076893675], [3, 8], [10.34656987684114, 12.274778357866877], [6, 12], [10.34656987684114, 10.672136228818303], [6, 13], [2.515814460804155, 2.7462079962742467], [9, 17], [2.515814460804155, 3.0917832617202263], [9, 18], [2.5410632245485965, 2.94418229346671], [10, 21], [9.068390573839, 10.093113839116661], [17, 29], [9.068390573839, 10.629386954972205], [17, 30], [9.362442743360143, 9.624409334572722], [25, 38], [8.03238262020562, 9.322735004394604], [27, 43], [8.03238262020562, 10.343959413175671], [27, 44], [4.595302637812905, 5.559679279777891], [36, 52], [4.255260134964089, 8.349897975074882], [41, 58], [4.255260134964089, 4.7754903627116505], [41, 59], [4.255260134964089, 4.51519806253614], [41, 60], [4.049555838195616, 4.54430486013454], [48, 68], [8.04882127599303, 9.010037627493455], [61, 82], [8.04882127599303, 8.627519884793607], [61, 83], [8.04882127599303, 8.888040802518331], [61, 84], [8.43097980981967, 9.72683024104602], [62, 87], [10.344728811550478, 10.657039419832401], [63, 90], [6.179721952579305, 6.372562134988929], [2, 4], [4.3498441469592155, 7.0793060458000046], [6, 7], [3.7018780117857393, 3.830747179790135], [7, 10], [3.7981557076893675, 4.858563126647075], [8, 13], [3.7981557076893675, 4.130900995818636], [8, 14], [3.7981557076893675, 4.151180410379321], [8, 15], [10.672136228818303, 10.99584678995718], [13, 20], [10.672136228818303, 11.757557581698014], [13, 21], [3.0917832617202263, 3.354503270359247], [18, 27], [3.0917832617202263, 3.7583271450972324], [18, 28], [3.0917832617202263, 3.7308309234218924], [18, 29], [2.94418229346671, 3.0857405739564983], [21, 32], [2.94418229346671, 3.4111747293007815], [21, 33], [2.94418229346671, 3.56429007611643], [21, 34], [10.093113839116661, 11.569243020276728], [29, 43], [10.093113839116661, 10.930370000053133], [29, 44], [9.624409334572722, 10.415618288843133], [38, 54], [9.624409334572722, 10.31173779532359], [38, 55], [9.624409334572722, 10.162597563278831], [38, 56], [9.322735004394604, 9.347249862243055], [43, 62], [10.343959413175671, 10.355438777553545], [44, 65], [10.343959413175671, 11.601206408110185], [44, 66], [10.343959413175671, 13.050271442489507], [44, 67], [8.349897975074882, 9.17124136109803], [58, 81], [8.349897975074882, 9.584291075471253], [58, 82], [4.7754903627116505, 5.9916583328451045], [59, 85], [4.7754903627116505, 5.150904371267486], [59, 86], [4.7754903627116505, 4.8576574145748275], [59, 87], [4.54430486013454, 4.599735609317229], [68, 96], [4.54430486013454, 5.359304403985899], [68, 97], [4.54430486013454, 5.222169078782176], [68, 98], [9.010037627493455, 9.427261984570032], [82, 113], [8.627519884793607, 8.755041452346765], [83, 116], [8.627519884793607, 8.831284530912104], [83, 117], [9.72683024104602, 10.4682450724909], [87, 121],
         marker = 'o',color="black")


plt.plot([10.34656987684114, 14.293672594619384], [6, 6], [14.293672594619384, 15.636060449195254], [6, 6], [15.636060449195254, 15.795211860122008], [6, 6], [15.795211860122008, 17.545209444880058], [6, 6], [17.545209444880058, 18.0395560383706], [6, 6], [17.545209444880058, 17.650751102075958], [6, 7], [17.545209444880058, 19.2906534276172], [6, 8], [18.0395560383706, 18.870913501281642], [6, 6], [18.0395560383706, 18.212100803376977], [6, 7], [17.650751102075958, 20.305070104441445], [7, 10], [17.650751102075958, 19.302555935505712], [7, 11], [17.650751102075958, 18.431666862146393], [7, 12], [19.2906534276172, 19.67004539633722], [8, 15], [19.2906534276172, 19.37737984625662], [8, 16], [18.212100803376977, 18.259747131594484], [7, 8], [20.305070104441445, 22.070200000470642], [10, 11], [20.305070104441445, 22.206600618125044], [10, 12], [19.302555935505712, 21.019102758217727], [11, 15], [19.302555935505712, 20.812067574816766], [11, 16], [18.431666862146393, 24.198937029813234], [12, 19], [19.37737984625662, 20.660702369465675], [16, 23], [19.37737984625662, 20.38393080034966], [16, 24], [18.259747131594484, 18.89198021519498], [8, 8], [22.070200000470642, 22.129154165539745], [11, 12], [22.206600618125044, 23.555698578970247], [12, 15], [21.019102758217727, 21.604995650881296], [15, 18], [21.019102758217727, 21.1491937561976], [15, 19], [20.812067574816766, 21.373700972155213], [16, 22], [24.198937029813234, 24.616412256473776], [19, 25], [20.660702369465675, 20.857464021105717], [23, 30], [20.38393080034966, 22.0974765051726], [24, 33], [20.38393080034966, 20.841697693877965], [24, 34], [22.129154165539745, 22.78897488270257], [12, 12], [22.129154165539745, 22.61981443584314], [12, 13], [22.129154165539745, 22.156975519980026], [12, 14], [23.555698578970247, 26.579265611675346], [15, 18], [23.555698578970247, 24.76716496839669], [15, 19], [23.555698578970247, 29.1230553858308], [15, 20], [21.604995650881296, 22.56029521389803], [18, 24], [21.1491937561976, 24.18065121027205], [19, 27], [21.373700972155213, 21.494091978562118], [22, 30], [20.857464021105717, 21.717975246331694], [30, 39], [20.857464021105717, 21.072765090132584], [30, 40], [20.857464021105717, 21.11215288036216], [30, 41], [22.0974765051726, 23.101364412999626], [33, 45], [22.0974765051726, 22.849157846295522], [33, 46], [22.0974765051726, 23.106497814357937], [33, 47], [20.841697693877965, 21.421531589495793], [34, 50], [20.841697693877965, 23.097276989372247], [34, 51], [20.841697693877965, 20.89416931262586], [34, 52], [22.78897488270257, 24.313458053586835], [12, 12], [22.156975519980026, 22.300035692599668], [14, 17], [22.156975519980026, 22.4207355637521], [14, 18], [22.156975519980026, 22.670518174249175], [14, 19], [26.579265611675346, 26.857623971818516], [18, 22], [26.579265611675346, 27.125760609288395], [18, 23], [26.579265611675346, 26.68032665515776], [18, 24], [24.76716496839669, 26.654327192138375], [19, 27], [21.494091978562118, 21.9364927708703], [30, 38], [21.494091978562118, 21.548782078025805], [30, 39], [21.494091978562118, 21.657792031677594], [30, 40], [21.072765090132584, 23.247595561200665], [40, 52], [21.072765090132584, 21.271116225705306], [40, 53], [21.11215288036216, 22.370774857319496], [41, 56], [21.11215288036216, 21.695821907076056], [41, 57], [21.11215288036216, 21.254598417382272], [41, 58], [23.101364412999626, 25.209088125845124], [45, 61], [23.101364412999626, 23.670998494395043], [45, 62], [23.101364412999626, 23.60258511988804], [45, 63], [22.849157846295522, 23.198495565865073], [46, 66], [22.849157846295522, 25.071553380040434], [46, 67], [22.849157846295522, 24.666755380955625], [46, 68], [23.106497814357937, 23.57729550058288], [47, 71], [23.106497814357937, 25.225084389456885], [47, 72], [23.106497814357937, 24.906606127001726], [47, 73], [21.421531589495793, 21.879541633770113], [50, 75], [21.421531589495793, 21.42978702320281], [50, 76], [21.421531589495793, 23.570562250193948], [50, 77], [24.313458053586835, 26.031587368634682], [12, 12], [22.4207355637521, 23.383538492630148], [18, 20], [22.4207355637521, 22.91494919831688], [18, 21], [22.4207355637521, 24.201406590677767], [18, 22], [22.670518174249175, 22.834529292920873], [19, 25], [27.125760609288395, 31.2721574097529], [23, 29], [27.125760609288395, 27.45377212703393], [23, 30], [27.125760609288395, 27.140993898093573], [23, 31], [26.68032665515776, 26.698449786373533], [24, 34], [21.9364927708703, 22.557526774838344], [38, 47], [21.9364927708703, 21.990888580595705], [38, 48], [21.548782078025805, 22.011284314312807], [39, 51], [21.548782078025805, 22.42378807677472], [39, 52], [21.548782078025805, 22.08482484305961], [39, 53], [21.657792031677594, 21.717508911631548], [40, 56], [23.247595561200665, 23.63514169777267], [52, 67], [23.247595561200665, 26.241246035369745], [52, 68], [23.247595561200665, 24.506952698542825], [52, 69], [21.271116225705306, 21.867798590277747], [53, 72], [22.370774857319496, 23.3975646577293], [56, 75], [21.254598417382272, 21.496444328002738], [58, 80], [21.254598417382272, 21.554592768724728], [58, 81], [21.254598417382272, 22.20452786551545], [58, 82], [25.209088125845124, 26.28828722565971], [61, 84], [25.209088125845124, 27.49250765717007], [61, 85], [23.670998494395043, 24.42664232823788], [62, 88], [23.198495565865073, 25.14544515944401], [66, 92], [23.198495565865073, 24.214997557405283], [66, 93], [23.198495565865073, 23.48514356301208], [66, 94], [25.071553380040434, 26.28828413189793], [67, 97], [25.071553380040434, 26.012849219957875], [67, 98], [23.57729550058288, 25.384944856233144], [71, 102], [24.906606127001726, 25.830937273992554], [73, 107], [24.906606127001726, 25.92977242340847], [73, 108], [21.42978702320281, 21.765526644779072], [76, 111], [21.42978702320281, 22.679006094501702], [76, 112], [23.570562250193948, 23.62672740701062], [77, 115],
         marker = 'o',color="red")
                                    














